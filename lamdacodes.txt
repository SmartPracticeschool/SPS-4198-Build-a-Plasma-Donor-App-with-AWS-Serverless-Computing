**********************getdata**********************************

import boto3
dynamoDB = boto3.resource('dynamodb')
table = dynamoDB.Table('plasmaApp')
def lambda_handler(event,context):
    email=event['email']
    print(email)
    resp = table.get_item(Key={"email":email})
    return resp['Item']



***********************registrationinsert**************************

import boto3
dynamoDB = boto3.resource('dynamodb')
table = dynamoDB.Table('plasmaApp')
def lambda_handler(event, context):
    # TODO implement
    print(event)#email = event['email']#data = {"email":email}
    table.put_item(Item=event)
    return {"code":200, "message":"Registration successful"}


***********************dataforrequest*****************************

import boto3
from boto3.dynamodb.conditions import Key
dynamoDB = boto3.resource('dynamodb')
table = dynamoDB.Table('plasmaApp')
def lambda_handler(event,context):
    blood = event['blood']
    response = table.scan(FilterExpression=Key('blood').eq(blood))
    return response['Items']


*********************countOfBloodGroups**********************

import boto3
from boto3.dynamodb.conditions import Key
dynamoDB = boto3.resource('dynamodb')
table = dynamoDB.Table('plasmaApp')

def lambda_handler(event,context):
    grps = ["O Positive","A Positive","B Positive","AB Positive","O Negative","A Negative","B Negative","AB Negative"]
    vals = []
    for i in grps:
        response = table.scan(FilterExpression=Key('blood').eq(i))
        vals.append(len(response['Items']))
        return vals



  